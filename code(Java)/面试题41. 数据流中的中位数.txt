面试题41. 数据流中的中位数
难度困难26
如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。
例如，
[2,3,4]?的中位数是 3
[2,3] 的中位数是 (2 + 3) / 2 = 2.5
设计一个支持以下两种操作的数据结构：
	? void addNum(int num) - 从数据流中添加一个整数到数据结构中。
	? double findMedian() - 返回目前所有元素的中位数。
示例 1：
输入：["MedianFinder","addNum","addNum","findMedian","addNum","findMedian"][[],[1],[2],[],[3],[]]输出：[null,null,null,1.50000,null,2.00000]
示例 2：
输入：["MedianFinder","addNum","findMedian","addNum","findMedian"][[],[2],[],[3],[]]输出：[null,null,2.00000,null,2.50000]
?
限制：
	? 最多会对?addNum、findMedia进行?50000?次调用。

来自 <https://leetcode-cn.com/problems/shu-ju-liu-zhong-de-zhong-wei-shu-lcof/> 

class MedianFinder {

    
    //大根堆 + 小根堆
    //大根堆 堆顶 存的是最大的数字   小的那一半
    
    //小根堆 堆顶 存的是最小的数字   大的那一半
    
    
    Queue<Integer> A, B;
    /** initialize your data structure here. */
    public MedianFinder() {
        A = new PriorityQueue<>();//小根堆 存大的一半数字
        B = new PriorityQueue<>((x,y) -> (y - x));//大根堆 存小的一半数字
    }
    
    public void addNum(int num) {
        //无脑放进小根堆
        //如果 小根堆的数字数量 > 大根堆的数字数量了 
        //把小根堆中较小数字 放进大根堆
        if(A.size() != B.size())
        {
            A.add(num);//无脑放进小根堆
            B.add(A.poll());//把小根堆中较小数字 放进大根堆
        }else
        {
            //堆顶比较  确保大小根堆的 一半的特性
            B.add(num);//大数字 在堆顶
            A.add(B.poll());//通过添加堆顶数字 确保 特性
        }
    }
    
    public double findMedian() {
        return A.size() == B.size() ? (A.peek() + B.peek())/2.0 : A.peek();
    } 
}

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */

