面试题37. 序列化二叉树
难度困难29
请实现两个函数，分别用来序列化和反序列化二叉树。
示例:?
你可以将以下二叉树：
1   / \  2   3     / \    4   5
序列化为 "[1,2,3,null,null,4,5]"

来自 <https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/> 
/**
?*?Definition?for?a?binary?tree?node.
?*?public?class?TreeNode?{
?*?????int?val;
?*?????TreeNode?left;
?*?????TreeNode?right;
?*?????TreeNode(int?x)?{?val?=?x;?}
?*?}
?*/
public?class?Codec?{
????//?Encodes?a?tree?to?a?single?string.
????public?String?serialize(TreeNode?root)?{
????????if(root?==?null)?return?"[]";
????????//序列化为?"[1,2,3,null,null,4,5]"
????????StringBuilder?res?=?new?StringBuilder("[");
????????Queue<TreeNode>?q?=?new?LinkedList<>();
????????q.add(root);
????????while(!q.isEmpty())
????????{
????????????TreeNode?t?=?q.poll();
????????????if(t?!=?null)
????????????{
????????????????res.append(t.val?+?",");
????????????????q.add(t.left);
????????????????q.add(t.right);
????????????}
????????????else
????????????????res.append("null,");
????????}
????????res.append("]");
????????return?res.toString();
????}
????//?Decodes?your?encoded?data?to?tree.
????public?TreeNode?deserialize(String?data)?{
????????if(data.equals("[]"))?return?null;
????????String[]?vals?=?data.substring(1,data.length()-1).split(",");
????????TreeNode?root?=?new?TreeNode(Integer.parseInt(vals[0]));
????????Queue<TreeNode>?q?=?new?LinkedList<>();
????????q.add(root);
????????int?i?=?1;
????????while(!q.isEmpty())
????????{
????????????TreeNode?node?=?q.poll();
????????????if(!vals[i].equals("null")){
????????????????node.left?=?new?TreeNode(Integer.parseInt(vals[i]));
????????????????q.add(node.left);
????????????}
????????????i?++;
????????????if(!vals[i].equals("null")){
????????????????node.right?=?new?TreeNode(Integer.parseInt(vals[i]));
????????????????q.add(node.right);
????????????}
????????????i?++;
????????}
????????return?root;
????}
}
//?Your?Codec?object?will?be?instantiated?and?called?as?such:
//?Codec?codec?=?new?Codec();
//?codec.deserialize(codec.serialize(root));
