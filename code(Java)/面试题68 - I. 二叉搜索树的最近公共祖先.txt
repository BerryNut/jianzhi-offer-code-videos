面试题68 - I. 二叉搜索树的最近公共祖先
难度简单29
给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。
百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”
例如，给定如下二叉搜索树:? root =?[6,2,8,0,4,7,9,null,null,3,5]

?
示例 1:
输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8输出: 6 解释: 节点 2 和节点 8 的最近公共祖先是 6。
示例 2:
输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4输出: 2解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。
?
说明:
	? 所有节点的值都是唯一的。
	? p、q 为不同节点且均存在于给定的二叉搜索树中。
注意：本题与主站 235 题相同：https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/
通过次数17,744
提交次数26,164
在真实的面试中遇到过这道题？

来自 <https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-zui-jin-gong-gong-zu-xian-lcof/> 


/**
?*?Definition?for?a?binary?tree?node.
?*?public?class?TreeNode?{
?*?????int?val;
?*?????TreeNode?left;
?*?????TreeNode?right;
?*?????TreeNode(int?x)?{?val?=?x;?}
?*?}
?*/
//迭代
class?Solution?{
????public?TreeNode?lowestCommonAncestor(TreeNode?root,?TreeNode?p,?TreeNode?q)?{
????????if(p.val?>?q.val){//确保p??<?q
????????????TreeNode?temp?=?p;
????????????p?=?q;
????????????q?=?temp;
????????}
????????while(root?!=?null){
????????????if(root.val?<?p.val)
????????????????root?=?root.right;
????????????else?if(root.val?>?q.val)
????????????????root?=?root.left;
????????????else?break;
????????}
????????return?root;
????}
}

//递归
/**
?*?Definition?for?a?binary?tree?node.
?*?public?class?TreeNode?{
?*?????int?val;
?*?????TreeNode?left;
?*?????TreeNode?right;
?*?????TreeNode(int?x)?{?val?=?x;?}
?*?}
?*/
class?Solution?{
????public?TreeNode?lowestCommonAncestor(TreeNode?root,?TreeNode?p,?TreeNode?q)?{
????????if(root.val?<?p.val?&&?root.val?<?q.val)
????????????return?lowestCommonAncestor(root.right,?p,?q);
????????if(root.val?>?p.val?&&?root.val?>?q.val)
????????????return?lowestCommonAncestor(root.left,?p,?q);
????????return?root;
????}
}

