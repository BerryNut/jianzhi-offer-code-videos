在一个数组中除了一个数字只出现一次之外，其他数字都出现了三次。
请找出那个只出现一次的数字。
你可以假设满足条件的数字一定存在。
思考题：
? 如果要求只使用?O(n)O(n)?的时间和额外?O(1)O(1)?的空间，该怎么做呢？
样例
输入：[1,1,1,2,2,2,3,4,4,4]
输出：3

来自 <https://www.acwing.com/problem/content/70/> 





class Solution {
public:
    int findNumberAppearingOnce(vector<int>& nums) {
        //只出现一次的 hash
        //
        // unordered_map<int, int> hash;
        // for(auto x : nums) hash[x] ++;
        // for(auto x : nums)
        //     if(hash[x] == 1)
        //         return x;
        
        // return 0;
        
        //整数  32位
        //二进制 
        //nums  3  1
        //32  31  30 .。。。  1
        //%3
        //%3 == 0    0
        //%3 == 1    1
        // int bitSum[32] = {0};
        // //统计每一位1的个数
        // for(int i = 0; i < nums.size(); i ++)
        // {
        //     int bitMask = 1; //向左移位  & 
        //     for(int j = 31; j >= 0; j --)
        //     {
        //         int bit = nums[i] & bitMask;
        //         if(bit)//bit == 1
        //             bitSum[j] += 1;//%3
        //         bitMask = bitMask << 1;//1――》  10   100 1000
        //     }
        // }
        
        // int res = 0;
        
        // for(int i = 0; i < 32; i ++)
        // {
        //     res = res << 1;
        //     res += bitSum[i] % 3;
        // }

        // return res;
        
        
        //自动机
        int ones = 0, twos = 0;
        //{ones, twos}
        //{0,0} {1,0} {0,1} {0,0}
        for(auto x : nums)
        {
            ones = (ones ^ x) & ~twos;
            twos = (twos ^ x) & ~ones;
        }
        
        return ones;

    }
};

