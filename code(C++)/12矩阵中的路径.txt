class Solution {
public:
    bool hasPath(char* matrix, int rows, int cols, char* str)
    {
        if(rows == 1 && cols == 1)
            if(matrix[0] == str[0]) return true;
            else return false;
        
        //matrix  Ò»Î¬
        //str Ä¿±ê×Ö·û´®  str  \0
        for(int i = 0; i < rows; i ++)
            for(int j = 0; j < cols; j ++)
                if(dfs(matrix, rows, cols, str, 0, i, j))
                    return true;
        
        return false;
    }
    
    bool dfs(char* matrix, int rows, int cols, char* str, int u, int x, int y)
    {
        if(str[u] == '\0') return true;
        
        int dx[4] = {-1, 0, 1,0}, dy[4] = {0, 1, 0, -1};
        for(int i = 0; i < 4; i ++)
        {
            int a = x + dx[i], b = y + dy[i];
            if(a >= 0 && a < rows && b >= 0 && b < cols && matrix[a * cols + b] == str[u])
            {
                char t = matrix[a * cols + b];
                matrix[a * cols + b] = '*';
                if(dfs(matrix, rows, cols, str, u + 1, a, b))
                    return true;
                matrix[a * cols + b] = t;
            }
        }
        return false;
    }


};