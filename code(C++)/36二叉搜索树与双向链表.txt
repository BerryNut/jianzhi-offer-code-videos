/*
struct TreeNode {
	int val;
	struct TreeNode *left;
	struct TreeNode *right;
	TreeNode(int x) :
			val(x), left(NULL), right(NULL) {
	}
};*/
class Solution {
public:
    TreeNode* Convert(TreeNode* root)
    {
        if(!root) return NULL;
        auto pairs = dfs(root);
        return pairs.first;
    }
    
    pair<TreeNode*,TreeNode*> dfs(TreeNode* root)
    {
        if(!root -> left && ! root -> right) return {root, root};
        if(root -> left && root -> right)
        {
            auto lsides = dfs(root -> left), rsides = dfs(root -> right);
            //×ó±ß·µ»Ø
            //{1£¬2}  2 ¡ª¡ª> root   root -> 2
            lsides.second -> right = root;
            root -> left = lsides.second;
            //ÓÒ±ß·µ»Ø
            //{1£¬2}  1¡ª¡ª> root  root -> 1
            rsides.first -> left = root;
            root -> right = rsides.first;
            return {lsides.first, rsides.second};
        }
        //Ö»ÓÐ×ó×ÓÊ÷
        if(root -> left)
        {
            auto lsides = dfs(root -> left);
            //×ó±ß·µ»Ø
            //{1£¬2}  2 ¡ª¡ª> root   root -> 2
            lsides.second -> right = root;
            root -> left = lsides.second;
           
            return {lsides.first, root};
        }
        //Ö»ÓÐÓÒ×ÓÊ÷
        if(root -> right)
        {
            auto rsides = dfs(root -> right);
            //ÓÒ±ß·µ»Ø
            //{1£¬2}  1¡ª¡ª> root  root -> 1
            rsides.first -> left = root;
            root -> right = rsides.first;
            return {root, rsides.second};
        }
    }
};








